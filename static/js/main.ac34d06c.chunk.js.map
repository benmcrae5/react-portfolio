{"version":3,"sources":["components/pages/Portfolio.js","components/pages/Homepage.js","components/pages/ReachOut.js","components/Header/Nav.js","assets/ben-sig-1.png","components/Header/index.js","components/Footer/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["console","log","ProjectList","Portfolio","id","className","map","project","project_name","Homepage","ReachOut","Object","keys","PAGES","Nav","handlePages","currentPage","tabNames","tab","href","toLowerCase","onClick","Header","src","signatureIcon","alt","Footer","App","useState","Page","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8YAIAA,QAAQC,IAAIC,GAEZ,IAgBeC,EAhBG,WACd,OACI,0BAASC,GAAG,YAAYC,UAAU,OAAlC,UACI,2CACCH,EAAYI,KAAK,SAACC,GAAD,OACd,8CAEQA,GAFR,kBAGGA,EAAQC,gBAFFD,EAAQC,qBCSlBC,EAlBE,WACb,OACI,0BAASL,GAAG,WAAWC,UAAU,OAAjC,UACI,0DACA,qLAGI,qCAAO,sBAAMA,UAAU,YAAhB,uBAAP,gGAEA,qCAAO,sBAAMA,UAAU,YAAhB,sBAAP,uEAEA,8EAAgD,sBAAMA,UAAU,YAAhB,sBAAhD,8BAEA,8CCNDK,EARE,WACb,OACI,yBAASN,GAAG,WAAWC,UAAU,OAAjC,SACI,wDCFZL,QAAQC,IAAIU,OAAOC,KAAKC,IAExB,IAoBeC,EApBH,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAClBC,EAAWN,OAAOC,KAAKC,GAC7B,OACI,oBAAIR,UAAU,8CAAd,SACKY,EAASX,KAAK,SAACY,GAAD,OACX,oBAAIb,UAAU,WAAd,SACI,oBACIc,KAAM,IAAMD,EAAIE,cAChBC,QAAU,kBAAMN,EAAYG,IAC5Bb,UAAa,gCACPW,IAAgBE,EAAM,SAAW,GAJ3C,cAKGA,MANuBA,SCV/B,MAA0B,sCCc1BI,EAVA,SAAC,GAAkC,IAAhCN,EAA+B,EAA/BA,YAAaD,EAAkB,EAAlBA,YAE3B,OACI,sBAAKV,UAAU,gCAAf,UACI,qBAAKkB,IAAKC,EAAeC,IAAI,oBAC7B,cAAC,EAAD,CAAKT,YAAaA,EAAaD,YAAaA,QCCzCW,EARA,WACX,OACI,yBAASrB,UAAU,aAAnB,SACI,8ECgBGsB,MAdf,WAAgB,IAAD,EACsBC,mBAAS,YAD/B,mBACNZ,EADM,KACOD,EADP,KAGPc,EAAOhB,EAAMG,GAEnB,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CAAQW,YAAaA,EAAaD,YAAaA,IAC/C,cAACc,EAAD,IACA,cAAC,EAAD,QCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNvD,QAAQuD,MAAMA,EAAMC,YE/G5BrB,K","file":"static/js/main.ac34d06c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Project from \"../Project\";\r\nimport ProjectList from \"../../assets/project-list.json\";\r\n\r\nconsole.log(ProjectList);\r\n\r\nconst Portfolio = () => {\r\n    return (\r\n        <section id=\"portfolio\" className=\"page\">\r\n            <h1>Portfolio</h1>\r\n            {ProjectList.map( (project) => (\r\n                <p \r\n                    key={project.project_name}\r\n                    {...project}\r\n                > {project.project_name}\r\n                </p>\r\n                )\r\n            )}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Portfolio;","import React from 'react';\r\nimport Portfolio from './Portfolio';\r\n\r\nconst Homepage = () => {\r\n    return (\r\n        <section id=\"homepage\" className=\"page\">\r\n            <h1>Welcome to My Digifolio!</h1>\r\n            <p>I hope you're enjoying the page so far! \r\n                (That icon at the top is super awesome, don't you think?) \r\n                Feel free to browse around and see what you like! </p>\r\n                <p>The <span className=\"span-emph\">Portfolio</span> link above will take you \r\n                to the actual portfolio section with some of my projects so far.</p>\r\n                <p>The <span className=\"span-emph\">ReachOut</span> page is currently under construction, \r\n                but the link still works! </p>\r\n                <p>And, in case you want to come back here, the <span className=\"span-emph\">Homepage</span> link \r\n                is there for you. </p>\r\n                <p>Have Fun!</p>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\n\r\nconst ReachOut = () => {\r\n    return (\r\n        <section id=\"ReachOut\" className=\"page\">\r\n            <h1>This is a ReachOut!</h1>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ReachOut;","import React from 'react';\r\nimport * as PAGES from \"../pages\";\r\n\r\nconsole.log(Object.keys(PAGES));\r\n\r\nconst Nav = ({ handlePages, currentPage }) => {\r\n    const tabNames = Object.keys(PAGES);\r\n    return (\r\n        <ul className=\"nav container d-flex justify-content-around\">\r\n            {tabNames.map( (tab) => (\r\n                <li className=\"nav-item\" key={tab}>\r\n                    <a \r\n                        href={\"#\" + tab.toLowerCase()}\r\n                        onClick={ () => handlePages(tab)}\r\n                        className= { \"py-2 d-none d-md-inline-block\" \r\n                            + currentPage === tab ? \"active\" : \"\" }\r\n                    > {tab}\r\n                    </a>\r\n                </li>\r\n                )\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Nav;","export default __webpack_public_path__ + \"static/media/ben-sig-1.557d2217.png\";","import React  from 'react';\r\nimport { default as Nav } from \"./Nav\";\r\nimport signatureIcon from \"../../assets/ben-sig-1.png\";\r\n\r\nconst Header = ({ currentPage, handlePages }) => {\r\n\r\n    return (\r\n        <div className=\"App-header navbar flex-column\">\r\n            <img src={signatureIcon} alt=\"Image Not Found\" />\r\n            <Nav currentPage={currentPage} handlePages={handlePages}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <section className=\"App-footer\">\r\n            <h4>This is a footer! What more do you want??</h4>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, {useState} from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Homepage from \"./components/pages/Homepage\";\nimport * as PAGES from \"./components/pages\";\n\nfunction App() {\n  const [currentPage, handlePages] = useState(\"Homepage\");\n\n  const Page = PAGES[currentPage];\n\n  return (\n    <div className=\"App\">\n      <Header currentPage={currentPage} handlePages={handlePages} />\n      <Page />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}